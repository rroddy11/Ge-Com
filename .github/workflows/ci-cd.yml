name: CI/CD - Develop Branch

on:
  push:
    branches: [develop] # Seulement sur push vers develop

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run Jest tests with coverage
        run: npm run test:coverage

  sonar-scan:
    name: SonarCloud Scan
    needs: test # Dépend du job test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important pour SonarCloud

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build Angular app
        run: npm run build -- --configuration production

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to Vercel
    needs: [test, sonar-scan] # Dépend des deux jobs précédents
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build Angular app
        run: npm run build -- --configuration production

      - name: Deploy to Vercel
        run: |
          # Solution avec un nom de projet simplifié et options corrigées
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes \
            --name=ge-com-app \
            --build-command "npm run build" \
            --output-directory "dist/gestion-commercial/browser"

          # Récupération de l'URL après déploiement
          DEPLOYMENT_URL=$(npx vercel list --token=${{ secrets.VERCEL_TOKEN }} --meta | grep -o 'https://[^ ]*' | head -n 1)
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
          echo "🌐 Deployment URL: $DEPLOYMENT_URL"

      - name: Show Deployment URL
        run: |
          echo "🎉 Votre application est déployée ici: $DEPLOYMENT_URL"
          echo "📋 L'application est maintenant live sur Vercel!"
